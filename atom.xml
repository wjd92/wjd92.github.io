<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BOC&#39;s warehouse</title>
  
  
  <link href="http://www.bumpchicken.cn/atom.xml" rel="self"/>
  
  <link href="http://www.bumpchicken.cn/"/>
  <updated>2022-05-07T17:19:25.777Z</updated>
  <id>http://www.bumpchicken.cn/</id>
  
  <author>
    <name>wjd</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>孤立森林原理详解</title>
    <link href="http://www.bumpchicken.cn/2020/05/25/IsolationTree/"/>
    <id>http://www.bumpchicken.cn/2020/05/25/IsolationTree/</id>
    <published>2020-05-25T03:33:00.000Z</published>
    <updated>2022-05-07T17:19:25.777Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://images.bumpchicken.cn/img/tree.png" /></p><p>孤立森林（IsolationForest）是周志华团队于2008年提出的一种具有线性复杂度的异常检测算法，被工业界广泛应用于诸如异常流量检测,金融欺诈行为检测等场景。</p><span id="more"></span><h2 id="算法原理">算法原理</h2><p>异常检测领域，通常是正常的样本占大多数，离群点占绝少数，因此大多数异常检测算法的基本思想都是对正常点构建模型，然后根据规则识别出不属于正常点模型的离群点，比较典型的算法有OneClass SVM(OCSVM), Local OutlierFactor(LOF)。和多数异常检测算法不同，孤立森林采用了一种较为高效的异常发现算法，其思路很朴素，但也足够直观有效。</p><p>考虑以下场景，一个二维平面上零零散散分布着一些点，随机使用分割线对其进行分割，直至所有但点都不可再划分（即被孤立了）。直观上来讲，可以发现那些密度很高的簇需要被切割很多次才会停止切割，但是密度很低的点很快就会停止切割到某个子空间了。</p><p><img src="https://images.bumpchicken.cn/img/20220424235501.png" width="90%" height="50%"></p><p>孤立森林分<b>训练</b>和<b>异常评估</b>两部分:</p><ul><li><b>训练:</b> 根据样本抽样构建多棵iTree，形成孤立森林</li><li><b>异常评估:</b>根据训练过程构建的孤立森林，计算待评估值的异常得分</li></ul><h2 id="训练">训练</h2><ol type="1"><li>给定训练数据集<spanclass="math inline">\(X\)</span>，确定需要构建的孤立树（iTree）个数t，按<spanclass="math inline">\(\phi\)</span>采样大小随机取样作为子样本集<spanclass="math inline">\(X^{&#39;}\)</span></li><li>在子样本集<spanclass="math inline">\(X^{&#39;}\)</span>上构建一棵孤立树(iTree)，过程如下图所示：</li></ol><p><img src="https://images.bumpchicken.cn/img/20220508001729.png" width="80%" height="20%"></p><ol type="a"><li><p>在<spanclass="math inline">\(X\)</span>中随机选择一个属性（维度），在当前样本数据范围内，随机产生一个分割点<spanclass="math inline">\(p\)</span>(介于当前维度最大和最小值之间)</p></li><li><p>此切割点即是一个超平面，将当前节点数据空间切分成2个子空间：将当前所选维度下小于p点的放在当前节点左分支，把大于p点的放在当前节点的右分支</p></li><li><p>在节点的左分支和右分支递归执行步骤a，b，不断构造新的叶子节点，直到叶子节点上只有一个数据或者树已经生长到了限制的高度</p></li><li><p>单棵iTree构建完成</p></li></ol><ol start="3" type="1"><li>按2的过程，依次构建t棵iTree，得到孤立森林</li></ol><p><img src="https://images.bumpchicken.cn/img/20220508003153.png" width="80%" height="30%"></p><h2 id="异常评估">异常评估</h2><p>构建了孤立森林(IForest)后，可以评估某个点<spanclass="math inline">\(x\)</span>的异常得分，用到如下公示</p><p><span class="math display">\[s(x,n)=2^{-\frac{E(h(x))}{c(n}}\]</span></p><p>其中，<span class="math inline">\(h(x)\)</span> 表示<spanclass="math inline">\(x\)</span>在某棵孤立树中的路径长度，<spanclass="math inline">\(E(h(x))\)</span>表示在所有孤立树中的期望路径长度。<spanclass="math inline">\(c(n)\)</span>为样本数为n时的二叉排序树(BST)的平均搜索路径长度，用来对样本<spanclass="math inline">\(x\)</span>的期望路径长度做归一化处理。<spanclass="math inline">\(c(n)\)</span>公式如下:</p><p><span class="math display">\[c(n)=2H(n-1)-(2(n-1)/n)\]</span></p><p>其中，<span class="math inline">\(H(i)\)</span>是一个调和数，约等于<span class="math inline">\(ln(i) + \gamma\)</span>，<spanclass="math inline">\(\gamma\)</span>为欧拉常数，约等于0.5772156649</p><p>论文对于异常得分分布有如下结论：</p><ol type="1"><li><p>如果异常得分接近1，那么一定是异常点</p></li><li><p>如果异常得分远小于0.5, 那么一定不是异常点</p></li><li><p>如果样本点点异常得分均在0.5左右，那么样本中可能不存在异常点</p></li></ol><p>异常得分<span class="math inline">\(s\)</span>和<spanclass="math inline">\(E(h(x))\)</span>关系图如下所示</p><p><img src="https://images.bumpchicken.cn/img/20220508010609.png" width="50%" height="30%"></p><p>异常得分的等高线图如下所示，通常潜在的异常点<spanclass="math inline">\(s&gt;=0.6\)</span><img src="http://images.bumpchicken.cn/img/20220508010909.png" width="50%" height="30%"></p><h2 id="参考资料">参考资料</h2><p>1.Liu F T, Ting K M, Zhou Z H. Isolation forest[C]//2008 Eighth IEEEInternational Conference on Data Mining. IEEE, 2008: 413-422.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;https://images.bumpchicken.cn/img/tree.png&quot; /&gt;&lt;/p&gt;
&lt;p&gt;孤立森林（Isolation
Forest）是周志华团队于2008年提出的一种具有线性复杂度的异常检测算法，被工业界广泛应用于诸如异常流量检测,金融欺诈行为检测等场景。&lt;/p&gt;</summary>
    
    
    
    <category term="异常检测" scheme="http://www.bumpchicken.cn/categories/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
    
    <category term="异常检测" scheme="http://www.bumpchicken.cn/tags/%E5%BC%82%E5%B8%B8%E6%A3%80%E6%B5%8B/"/>
    
  </entry>
  
</feed>
